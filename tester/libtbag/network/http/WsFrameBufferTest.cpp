/**
 * @file   WsFrameBufferTest.cpp
 * @brief  WsFrameBuffer class tester.
 * @author zer0
 * @date   2017-08-07
 */

#include <gtest/gtest.h>
#include <libtbag/network/http/WsFrameBuffer.hpp>
#include <libtbag/bitwise/Endian.hpp>

#include <vector>

using namespace libtbag;
using namespace libtbag::network;
using namespace libtbag::network::http;

TEST(WsFrameBufferTest, Default)
{
    uint8_t const REQUEST_FRAME1[] = {0x01, 0x9c, 0x6c, 0x11, 0xe8, 0xe3, 0x3e, 0x7e,
                                      0x8b, 0x88, 0x4c, 0x78, 0x9c, 0xc3, 0x1b, 0x78,
                                      0x9c, 0x8b, 0x4c, 0x59, 0xbc, 0xae, 0x20, 0x24,
                                      0xc8, 0xb4, 0x09, 0x73, 0xbb, 0x8c, 0x0f, 0x7a,
                                      0x8d, 0x97};
    uint8_t const REQUEST_FRAME2[] = {0x80, 0x9c, 0x6c, 0x11, 0xe8, 0xe3, 0x3e, 0x7e,
                                      0x8b, 0x88, 0x4c, 0x78, 0x9c, 0xc3, 0x1b, 0x78,
                                      0x9c, 0x8b, 0x4c, 0x59, 0xbc, 0xae, 0x20, 0x24,
                                      0xc8, 0xb4, 0x09, 0x73, 0xbb, 0x8c, 0x0f, 0x7a,
                                      0x8d, 0x97};
    std::vector<char> req1(REQUEST_FRAME1, REQUEST_FRAME1 + sizeof(REQUEST_FRAME1));
    std::vector<char> req2(REQUEST_FRAME2, REQUEST_FRAME2 + sizeof(REQUEST_FRAME2));
    std::string const RESULT_STRING1 = "Rock it with HTML5 WebSocket";
    std::string const RESULT_STRING2 = "Rock it with HTML5 WebSocketRock it with HTML5 WebSocket";

    std::size_t hit_count = 0;
    OpCode opcode_result = OpCode::OC_CONTINUATION_FRAME;
    bool finish_result = false;
    std::string result;

    WsFrameBuffer wsbuf;
    std::size_t count;

    count = wsbuf.exec(req1.data(), req1.size(), [&](OpCode code, bool finish, WsFrameBuffer::Buffer & buffer) -> bool{
        opcode_result = code;
        finish_result = finish;
        result.assign(buffer.begin(), buffer.end());
        ++hit_count;
        return true;
    });
    ASSERT_EQ(1, count);
    ASSERT_EQ(1, hit_count);
    ASSERT_EQ(RESULT_STRING1, result);
    ASSERT_EQ(OpCode::OC_TEXT_FRAME, opcode_result);
    ASSERT_FALSE(finish_result);

    hit_count = 0;
    opcode_result = OpCode::OC_CONTINUATION_FRAME;
    finish_result = false;
    result.clear();

    count = wsbuf.exec(req2.data(), req2.size(), [&](OpCode code, bool finish, WsFrameBuffer::Buffer & buffer) -> bool{
        opcode_result = code;
        finish_result = finish;
        result.assign(buffer.begin(), buffer.end());
        ++hit_count;
        return true;
    });
    ASSERT_EQ(1, count);
    ASSERT_EQ(1, hit_count);
    ASSERT_EQ(RESULT_STRING2, result);
    ASSERT_EQ(OpCode::OC_TEXT_FRAME, opcode_result);
    ASSERT_TRUE(finish_result);
}

TEST(WsFrameBufferTest, SplitPayload)
{
    uint8_t const REQUEST_FRAME1[] = {0x81, 0x9c, 0x6c, 0x11, 0xe8, 0xe3, 0x3e, 0x7e,
                                      0x8b, 0x88, 0x4c, 0x78, 0x9c, 0xc3, 0x1b, 0x78};
    uint8_t const REQUEST_FRAME2[] = {0x9c, 0x8b, 0x4c, 0x59, 0xbc, 0xae, 0x20, 0x24,
                                      0xc8, 0xb4, 0x09, 0x73, 0xbb, 0x8c, 0x0f, 0x7a,
                                      0x8d, 0x97};
    std::vector<char> req1(REQUEST_FRAME1, REQUEST_FRAME1 + sizeof(REQUEST_FRAME1));
    std::vector<char> req2(REQUEST_FRAME2, REQUEST_FRAME2 + sizeof(REQUEST_FRAME2));
    std::string const RESULT_STRING = "Rock it with HTML5 WebSocket";

    std::size_t hit_count = 0;
    OpCode opcode_result = OpCode::OC_CONTINUATION_FRAME;
    bool finish_result = false;
    std::string result;

    WsFrameBuffer wsbuf;
    std::size_t count;

    count = wsbuf.exec(req1.data(), req1.size(), [&](OpCode code, bool finish, WsFrameBuffer::Buffer & buffer) -> bool{
        ++hit_count;
        return true;
    });
    ASSERT_EQ(0, count);
    ASSERT_EQ(0, hit_count);

    hit_count = 0;
    opcode_result = OpCode::OC_CONTINUATION_FRAME;
    finish_result = false;
    result.clear();

    count = wsbuf.exec(req2.data(), req2.size(), [&](OpCode code, bool finish, WsFrameBuffer::Buffer & buffer) -> bool{
        opcode_result = code;
        finish_result = finish;
        result.assign(buffer.begin(), buffer.end());
        ++hit_count;
        return true;
    });
    ASSERT_EQ(1, count);
    ASSERT_EQ(1, hit_count);
    ASSERT_EQ(RESULT_STRING, result);
    ASSERT_EQ(OpCode::OC_TEXT_FRAME, opcode_result);
    ASSERT_TRUE(finish_result);
}

TEST(WsFrameBufferTest, Case01)
{
    uint8_t const REQUEST_FRAME1[] = {
            0x82, 0xD0, 0xA6, 0xF2, 0xD5, 0x9E, 0xB2, 0xF2, 0xD5, 0x9E, 0xA6, 0xF2, 0xD5, 0x9E, 0xA6, 0xF2,
            0xDF, 0x9E, 0xB6, 0xF2, 0xDD, 0x9E, 0xA1, 0xF2, 0xD9, 0x9E, 0xAC, 0xF2, 0xD5, 0x9E, 0xA6, 0xF2,
            0xD5, 0x9F, 0xBA, 0xF2, 0xD5, 0x9E, 0xAE, 0xF2, 0xD5, 0x9E, 0xA2, 0xF2, 0xD3, 0x9E, 0xA2, 0xF2,
            0xD5, 0x9E, 0xA6, 0xF2, 0xDF, 0x9E, 0xB2, 0xF2, 0xDD, 0x9E, 0xA6, 0xF2, 0xD1, 0x9E, 0xAC, 0xF2,
            0xD5, 0x9E, 0xB6, 0xF2, 0xD5, 0x9E, 0x81, 0x9F, 0x9E, 0x5B, 0x33, 0xD9, 0xD5, 0x9E, 0xA6, 0xF2,
            0xD5, 0x9E, 0xA6, 0xF2, 0xD5, 0x9E};
    uint8_t const REQUEST_FRAME2[] = {
            0x82, 0xE8, 0xA3, 0x2B, 0x69, 0xF9, 0xB7, 0x2B, 0x69, 0xF9, 0xA3, 0x2B, 0x69, 0xF9, 0xA3, 0x2B,
            0x63, 0xF9, 0xB1, 0x2B, 0x61, 0xF9, 0xA4, 0x2B, 0x65, 0xF9, 0xA9, 0x2B, 0x69, 0xF9, 0xA3, 0x2B,
            0x69, 0xFA, 0x97, 0x2B, 0x69, 0xF9, 0xAF, 0x2B, 0x69, 0xF9, 0xA3, 0x2B, 0x6F, 0xF9, 0xAB, 0x2B,
            0x6D, 0xF9, 0xA5, 0x2B, 0x69, 0xF9, 0xA7, 0x2B, 0x69, 0xF9, 0xAF, 0x2B, 0x69, 0xF9, 0xF7, 0x6E,
            0x3A, 0xAD, 0xFC, 0x66, 0x2C, 0xAA, 0xF0, 0x6A, 0x2E, 0xBC, 0xA3, 0x2B, 0x63, 0xF9, 0xB7, 0x2B,
            0x61, 0xF9, 0xA3, 0x2B, 0x6D, 0xF9, 0xA9, 0x2B, 0x69, 0xF9, 0xB3, 0x2B, 0x69, 0xF9, 0x57, 0x13,
            0x9B, 0x4A, 0x35, 0x00, 0x69, 0xF9, 0xA3, 0x2B, 0x69, 0xF9, 0xA3, 0x2B, 0x69, 0xF9};
    uint8_t const REQUEST_FRAME3[] = {
            0x82, 0xD0, 0x4A, 0xFB, 0xE1, 0xF1, 0x5E, 0xFB, 0xE1, 0xF1, 0x4A, 0xFB, 0xE1, 0xF1, 0x4A, 0xFB,
            0xEB, 0xF1, 0x5A, 0xFB, 0xE9, 0xF1, 0x4D, 0xFB, 0xED, 0xF1, 0x40, 0xFB, 0xE1, 0xF1, 0x4A, 0xFB,
            0xE1, 0xF0, 0x56, 0xFB, 0xE1, 0xF1, 0x42, 0xFB, 0xE1, 0xF1, 0x4E, 0xFB, 0xE7, 0xF1, 0x4E, 0xFB,
            0xE1, 0xF1, 0x4A, 0xFB, 0xEB, 0xF1, 0x5E, 0xFB, 0xE9, 0xF1, 0x4A, 0xFB, 0xE5, 0xF1, 0x40, 0xFB,
            0xE1, 0xF1, 0x5A, 0xFB, 0xE1, 0xF1, 0xF8, 0x03, 0x3E, 0x97, 0xDD, 0xD0, 0xE1, 0xF1, 0x4A, 0xFB,
            0xE1, 0xF1, 0x4A, 0xFB, 0xE1, 0xF1, 0xA9, 0x2B, 0x69, 0xF9, 0xB3, 0x2B, 0x69, 0xF9, 0x57, 0x13,
            0x9B, 0x4A, 0x35, 0x00, 0x69, 0xF9, 0xA3, 0x2B, 0x69, 0xF9, 0xA3, 0x2B, 0x69, 0xF9};
    uint8_t const REQUEST_FRAME4[] = {
            0x82, 0xE8, 0x42, 0xCB, 0x6A, 0xB3, 0x56, 0xCB, 0x6A, 0xB3, 0x42, 0xCB, 0x6A, 0xB3, 0x42, 0xCB,
            0x60, 0xB3, 0x50, 0xCB, 0x62, 0xB3, 0x45, 0xCB, 0x66, 0xB3, 0x48, 0xCB, 0x6A, 0xB3, 0x42, 0xCB,
            0x6A, 0xB0, 0x76, 0xCB, 0x6A, 0xB3, 0x4E, 0xCB, 0x6A, 0xB3, 0x42, 0xCB, 0x6C, 0xB3, 0x4A, 0xCB,
            0x6E, 0xB3, 0x44, 0xCB, 0x6A, 0xB3, 0x46, 0xCB, 0x6A, 0xB3, 0x4E, 0xCB, 0x6A, 0xB3, 0x16, 0x8E,
            0x39, 0xE7, 0x1D, 0x86, 0x2F, 0xE0, 0x11, 0x8A, 0x2D, 0xF6, 0x42, 0xCB, 0x60, 0xB3, 0x56, 0xCB,
            0x62, 0xB3, 0x42, 0xCB, 0x6E, 0xB3, 0x48, 0xCB, 0x6A, 0xB3, 0x52, 0xCB, 0x6A, 0xB3, 0xCC, 0x7C,
            0x16, 0xFB, 0xD8, 0xE0, 0x6A, 0xB3, 0x42, 0xCB, 0x6A, 0xB3, 0x42, 0xCB, 0x6A, 0xB3};
    std::vector<char> req1(REQUEST_FRAME1, REQUEST_FRAME1 + sizeof(REQUEST_FRAME1));
    std::vector<char> req2(REQUEST_FRAME2, REQUEST_FRAME2 + sizeof(REQUEST_FRAME2));
    std::vector<char> req3(REQUEST_FRAME3, REQUEST_FRAME3 + sizeof(REQUEST_FRAME3));
    std::vector<char> req4(REQUEST_FRAME4, REQUEST_FRAME4 + sizeof(REQUEST_FRAME4));
    ASSERT_EQ( 86, req1.size());
    ASSERT_EQ(110, req2.size());
    ASSERT_EQ(110, req3.size());
    ASSERT_EQ(110, req4.size());

    std::size_t hit_count = 0;
    OpCode opcode_result = OpCode::OC_CONTINUATION_FRAME;
    bool finish_result = false;
    std::vector<uint8_t> result;

    WsFrameBuffer wsbuf;
    std::size_t count;

    count = wsbuf.exec(req1.data(), req1.size(), [&](OpCode code, bool finish, WsFrameBuffer::Buffer & buffer) -> bool{
        opcode_result = code;
        finish_result = finish;
        result.assign(buffer.begin(), buffer.end());
        ++hit_count;
        return true;
    });
    ASSERT_EQ(1, count);
    ASSERT_EQ(1, hit_count);
    ASSERT_EQ(OpCode::OC_BINARY_FRAME, opcode_result);
    ASSERT_TRUE(finish_result);

    count = wsbuf.exec(req2.data(), req2.size(), [&](OpCode code, bool finish, WsFrameBuffer::Buffer & buffer) -> bool{
        opcode_result = code;
        finish_result = finish;
        result.assign(buffer.begin(), buffer.end());
        ++hit_count;
        return true;
    });
    ASSERT_EQ(1, count);
    ASSERT_EQ(1, hit_count);
    ASSERT_EQ(OpCode::OC_BINARY_FRAME, opcode_result);
    ASSERT_TRUE(finish_result);

    count = wsbuf.exec(req3.data(), req3.size(), [&](OpCode code, bool finish, WsFrameBuffer::Buffer & buffer) -> bool{
        opcode_result = code;
        finish_result = finish;
        result.assign(buffer.begin(), buffer.end());
        ++hit_count;
        return true;
    });
    ASSERT_EQ(1, count);
    ASSERT_EQ(1, hit_count);
    ASSERT_EQ(OpCode::OC_BINARY_FRAME, opcode_result);
    ASSERT_TRUE(finish_result);

    count = wsbuf.exec(req4.data(), req4.size(), [&](OpCode code, bool finish, WsFrameBuffer::Buffer & buffer) -> bool{
        opcode_result = code;
        finish_result = finish;
        result.assign(buffer.begin(), buffer.end());
        ++hit_count;
        return true;
    });
    ASSERT_EQ(1, count);
    ASSERT_EQ(1, hit_count);
    ASSERT_EQ(OpCode::OC_BINARY_FRAME, opcode_result);
    ASSERT_TRUE(finish_result);
}

