/**
 * @file   config.h
 * @brief  Program config header.
 * @author zer0
 * @date   2016-02-23
 */

#ifndef __INCLUDE_${MAIN_NAME_UPPER}__${MAIN_NAME_UPPER}_CONFIG_H__
#define __INCLUDE_${MAIN_NAME_UPPER}__${MAIN_NAME_UPPER}_CONFIG_H__

// MS compatible compilers support #pragma once
#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

#if defined(UNICODE) || defined(_UNICODE)
#error "Don't using UNICODE from the main project."
#endif

/**
 * @defgroup __DOXYGEN_GROUP__PREFIX_INFORMATION__ Prefix information
 * @brief Prefix information group.
 * @{
 */

#include <${MAIN_NAME}/prefix.h>

#ifndef TITLE_NAME
#error "Not defined TITLE_NAME."
#endif

#ifndef VERSION_MAJOR
#error "Not defined VERSION_MAJOR."
#endif

#ifndef VERSION_MINOR
#error "Not defined VERSION_MINOR."
#endif

#ifndef VERSION_PATCH
#error "Not defined VERSION_PATCH."
#endif

/**
 * @}
 */

#define TO_STRING_IMP(m)  #m
#define TO_STRING(x)      TO_STRING_IMP(x)
#define LINE_STRING       TO_STRING(__LINE__)
#define FILE_STRING       __FILE__
#define DATE_STRING       __DATE__
#define TIME_STRING       __TIME__

#define __DATETIME__  DATE_STRING  "T" TIME_STRING
#define __LOCATION__  FILE_STRING  ":" LINE_STRING
#define DEBUG_STAMP   __DATETIME__ " " __LOCATION__

#define VERSION_SEPARATOR "."
#define VERSION_STRING \
    TO_STRING(VERSION_MAJOR)  VERSION_SEPARATOR \
    TO_STRING(VERSION_MINOR)  VERSION_SEPARATOR \
    TO_STRING(VERSION_PATCH)

#define TITLE_STRING  TO_STRING(TITLE_NAME)
#define TITLE_PREFIX  "[" TITLE_STRING "]"

/** Main Title. */
#define MAIN_TITLE \
    TITLE_STRING " v" VERSION_STRING

/** Unused parameter macro. */
#ifndef UNUSED_PARAM
#define UNUSED_PARAM(x)
#endif

#ifndef NAMELESS
#define NAMELESS(x)
#endif

#ifndef __EMPTY_BLOCK__
#define __EMPTY_BLOCK__
#endif

/**
 * Remove unused declaration warning.
 */
#ifndef REMOVE_UNUSED_DECLARATION
#define REMOVE_UNUSED_DECLARATION(name, x) \
    inline void __remove_##unused##name##__() \
    { x; }
#endif

/**
 * Remove unused variables warning.
 */
#ifndef REMOVE_UNUSED_VARIABLE
#define REMOVE_UNUSED_VARIABLE(x) \
    if (x) { }
#endif

#ifndef VERSION_NUMBER_ZERO
#define VERSION_NUMBER_ZERO 0
#endif

#ifndef COMPARE_AND
#define COMPARE_AND(x) (x) && (x)
#endif

#ifndef COMPARE_OR
#define COMPARE_OR(x) (x) || (x)
#endif

// ----------
// Debugging.
// ----------

#if defined(DEBUG) || defined(_DEBUG)
# define __DEBUG_MODE__
#else // defined(NDEBUG) || defined(RELEASE)
# define __RELEASE_MODE__
#endif

// ---------
// Language.
// ---------

#if defined(__STDC__)
#define __LANG_STDC__
# if (__STDC_VERSION__ > 0)
#  define __LANG_STDC_VERSION__  __STDC_VERSION__
# else
#  define __LANG_STDC_VERSION__  VERSION_NUMBER_ZERO
# endif
#endif

#if defined(__cplusplus)
#define __LANG_STDCPP__
# if (__cplusplus > 0)
#  define __LANG_STDCPP_VERSION__  __cplusplus
# else
#  define __LANG_STDCPP_VERSION__  VERSION_NUMBER_ZERO
# endif
#endif

#if defined(__OBJC__)
# define __LANG_OBJC__
# define __LANG_OBJC_VERSION__  VERSION_NUMBER_ZERO
#endif


// ---------
// Compiler.
// ---------

#if defined(__clang__)
#define __COMP_CLANG__
#endif

#if defined(__GNUC__)
#define __COMP_GNUC__
#endif

#if defined(__llvm__)
#define __COMP_LLVM__
#endif

#if defined(_MSC_VER)
#define __COMP_MSVC__
#endif


// -----------------
// Operating System.
// -----------------

#if defined(__CYGWIN__)
#define __OS_CYGWIN__
#endif

#if defined(linux) || defined(__linux)
#define __OS_LINUX__
#endif

#if (defined(__APPLE__) && defined(__MACH__))
# if defined(__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__)
#  define __OS_IOS__
# else
#  define __OS_MACOS__
# endif
#elif defined(macintosh) || defined(Macintosh)
# define __OS_MACOS__
#endif

#if defined(unix) || defined(__unix) || \
    defined(_XOPEN_SOURCE) || defined(_POSIX_SOURCE)
#define __OS_UNIX__
#endif

#if defined(_WIN32) || defined(_WIN64) || \
    defined(__WIN32__) || defined(__TOS_WIN__) || \
    defined(__WINDOWS__)
#define __OS_WINDOWS__
#endif


// -----------------
// Windows platform.
// -----------------

#if defined(__MINGW32__) || defined(__MINGW64__)
#define __PLAT_MINGW__
#endif

#if defined(__OS_WINDOWS) && \
    (!defined(WINAPI_FAMILY) || (WINAPI_FAMILY == WINAPI_FAMILY_DESKTOP_APP))
#define __PLAT_WINDOWS_DESKTOP__
#endif

#if defined(__OS_WINDOWS) && \
    defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP)
#define __PLAT_WINDOWS_STORE__
#endif

#if defined(__OS_WINDOWS) && \
    defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP)
#define __PLAT_WINDOWS_PHONE__
#endif


// -------------------------
// Windows platform version.
// -------------------------

#if defined(__OS_WINDOWS__)
# define WIN32_LEAN_AND_MEAN

# ifndef _WIN32_WINNT
# define _WIN32_WINNT 0x0600
# endif

# ifndef _WIN32_WINDOWS
# define _WIN32_WINDOWS 0x0410
# endif

// Minimum platform version.
# ifndef WINVER
# define WINVER _WIN32_WINNT
# endif

// Minimum internet explorer version.
# ifndef _WIN32_IE
# define _WIN32_IE 0x0700
# endif
#endif // __OS_WINDOWS__


// ---------------
// Boost settings.
// ---------------

// Predefine collection header: <boost/predef.h>

// Don't using BOOST_ALL_DYN_LINK macro.
//#define BOOST_ALL_DYN_LINK

#if 0
#define BOOST_FILESYSTEM_DYN_LINK
#define BOOST_LOG_DYN_LINK
#endif

#if 0
# error "Don't using boost.test from the main project."
# define BOOST_TEST_DYN_LINK
# define BOOST_TEST_MODULE WorldUnitTester
#endif

#if 0
/**
 * IMPORTANT: In case if message compiler detection fails for some reason,
 * you can explicitly disable support for event log backend by defining the
 * BOOST_LOG_WITHOUT_EVENT_LOG configuration macro when building the library.
 *
 * @see http://www.boost.org/doc/libs/1_57_0_b1/libs/log/doc/html/log/installation.html
 */
# define BOOST_LOG_WITHOUT_EVENT_LOG
#endif


// ------------------
// List of namespace.
// ------------------

#ifndef NAMESPACE_ANONYMOUS
#define NAMESPACE_ANONYMOUS
#define NAMESPACE_ANONYMOUS_OPEN   namespace {
#define NAMESPACE_ANONYMOUS_CLOSE  }
#endif

#endif // __INCLUDE_${MAIN_NAME_UPPER}__${MAIN_NAME_UPPER}_CONFIG_H__

