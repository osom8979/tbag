/**
 * @file   ${SOURCE_FILENAME}
 * @brief  ${CLASSNAME} class implementation.
 * @author ${AUTHOR}
 * @date   ${DATE}
 */

#include <${INCLUDE_PAIR}>

#include <algorithm>
#include <utility>

${NAMESPACE_FULL_LIST_BEGIN}

${CLASSNAME}::${CLASSNAME}()
{
    // EMPTY.
}

${CLASSNAME}::${CLASSNAME}(${CLASSNAME} const & obj) : ${CLASSNAME}()
{
    (*this) = obj;
}

${CLASSNAME}::${CLASSNAME}(${CLASSNAME} && obj) TBAG_NOEXCEPT : ${CLASSNAME}()
{
    (*this) = std::move(obj);
}

${CLASSNAME}::~${CLASSNAME}()
{
    // EMPTY.
}

${CLASSNAME} & ${CLASSNAME}::operator =(${CLASSNAME} const & obj)
{
    copy(obj);
    return *this;
}

${CLASSNAME} & ${CLASSNAME}::operator =(${CLASSNAME} && obj) TBAG_NOEXCEPT
{
    swap(obj);
    return *this;
}

void ${CLASSNAME}::copy(${CLASSNAME} const & obj)
{
    if (this != &obj) {
        // TODO: Copy object.
    }
}

void ${CLASSNAME}::swap(${CLASSNAME} & obj) TBAG_NOEXCEPT
{
    if (this != &obj) {
        // TODO: Swap object.
    }
}

${NAMESPACE_FULL_LIST_END}

