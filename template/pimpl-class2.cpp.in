/**
 * @file   ${SOURCE_FILENAME}
 * @brief  ${CLASSNAME} class implementation.
 * @author ${AUTHOR}
 * @date   ${DATE}
 */

#include <${INCLUDE_PAIR}>
#include <libtbag/Noncopyable.hpp>

#include <cassert>
#include <algorithm>
#include <utility>

${NAMESPACE_FULL_LIST_BEGIN}

/**
 * ${CLASSNAME}::Impl class implementation.
 *
 * @author ${AUTHOR}
 * @date   ${DATE}
 */
struct ${CLASSNAME}::Impl : private libtbag::Noncopyable
{
private:
    ${CLASSNAME} * _parent;

public:
    Impl(${CLASSNAME} * parent) : _parent(parent)
    {
        assert(_parent != nullptr);
    }

    ~Impl()
    {
        // EMPTY.
    }
};

// ${CLASSNAME_IMPLEMENT_HORIZON}
// ${CLASSNAME_IMPLEMENT_COMMENT}
// ${CLASSNAME_IMPLEMENT_HORIZON}

${CLASSNAME}::${CLASSNAME}() : _impl(std::make_shared<Impl>(this))
{
    assert(static_cast<bool>(_impl));
}

${CLASSNAME}::${CLASSNAME}(std::nullptr_t) TBAG_NOEXCEPT : _impl(nullptr)
{
    // EMPTY.
}

${CLASSNAME}::${CLASSNAME}(${CLASSNAME} const & obj) TBAG_NOEXCEPT : ${CLASSNAME}(nullptr)
{
    (*this) = obj;
}

${CLASSNAME}::${CLASSNAME}(${CLASSNAME} && obj) TBAG_NOEXCEPT : ${CLASSNAME}(nullptr)
{
    (*this) = std::move(obj);
}

${CLASSNAME}::~${CLASSNAME}()
{
    // EMPTY.
}

${CLASSNAME} & ${CLASSNAME}::operator =(${CLASSNAME} const & obj) TBAG_NOEXCEPT
{
    copy(obj);
    return *this;
}

${CLASSNAME} & ${CLASSNAME}::operator =(${CLASSNAME} && obj) TBAG_NOEXCEPT
{
    swap(obj);
    return *this;
}

void ${CLASSNAME}::copy(${CLASSNAME} const & obj) TBAG_NOEXCEPT
{
    if (this != &obj) {
        _impl = obj._impl;
    }
}

void ${CLASSNAME}::swap(${CLASSNAME} & obj) TBAG_NOEXCEPT
{
    if (this != &obj) {
        _impl.swap(obj._impl);
    }
}

void ${CLASSNAME}::reset()
{
    _impl.reset();
}

${NAMESPACE_FULL_LIST_END}

