/**
 * @file   ${HEADER_FILENAME}
 * @brief  ${CLASSNAME} class prototype.
 * @author ${AUTHOR}
 * @date   ${DATE}
 */

#ifndef ${INCLUDE_GUARD}
#define ${INCLUDE_GUARD}

// MS compatible compilers support #pragma once
#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

#include <${CONFIG_HEADER_PATH}>
#include <libtbag/predef.hpp>

#include <memory>

// ${NAMESPACE_OPEN_COMMENT}
${NAMESPACE_OPEN}
// ${NAMESPACE_OPEN_COMMENT}

${NAMESPACE_LIST_BEGIN}

/**
 * ${CLASSNAME} class prototype.
 *
 * @author ${AUTHOR}
 * @date   ${DATE}
 */
class ${EXPORT_SYMBOL} ${CLASSNAME}
{
public:
    struct Impl;
    friend struct Impl;

public:
    using SharedImpl = std::shared_ptr<Impl>;

private:
    SharedImpl _impl;

public:
    ${CLASSNAME}();
    ${CLASSNAME}(std::nullptr_t) TBAG_NOEXCEPT;
    ${CLASSNAME}(${CLASSNAME} const & obj) TBAG_NOEXCEPT;
    ${CLASSNAME}(${CLASSNAME} && obj) TBAG_NOEXCEPT;
    ~${CLASSNAME}();

public:
    ${CLASSNAME} & operator =(${CLASSNAME} const & obj) TBAG_NOEXCEPT;
    ${CLASSNAME} & operator =(${CLASSNAME} && obj) TBAG_NOEXCEPT;

public:
    void copy(${CLASSNAME} const & obj) TBAG_NOEXCEPT;
    void swap(${CLASSNAME} & obj) TBAG_NOEXCEPT;

public:
    inline friend void swap(${CLASSNAME} & lh, ${CLASSNAME} & rh) TBAG_NOEXCEPT
    { lh.swap(rh); }

public:
    inline bool exists() const TBAG_NOEXCEPT
    { return static_cast<bool>(_impl); }

    inline operator bool() const TBAG_NOEXCEPT
    { return exists(); }

public:
    inline Impl       * get()       TBAG_NOEXCEPT { return _impl.get(); }
    inline Impl const * get() const TBAG_NOEXCEPT { return _impl.get(); }

    inline Impl       * operator ->()       TBAG_NOEXCEPT { return get(); }
    inline Impl const * operator ->() const TBAG_NOEXCEPT { return get(); }

    inline Impl       & ref()       TBAG_NOEXCEPT { return *get(); }
    inline Impl const & ref() const TBAG_NOEXCEPT { return *get(); }

    inline Impl       & operator *()       TBAG_NOEXCEPT { return ref(); }
    inline Impl const & operator *() const TBAG_NOEXCEPT { return ref(); }

public:
    friend inline bool operator <(${CLASSNAME} const & x, ${CLASSNAME} const & y) TBAG_NOEXCEPT
    { return x.get() < y.get(); }

    friend inline bool operator >(${CLASSNAME} const & x, ${CLASSNAME} const & y) TBAG_NOEXCEPT
    { return x.get() > y.get(); }

    friend inline bool operator <=(${CLASSNAME} const & x, ${CLASSNAME} const & y) TBAG_NOEXCEPT
    { return x.get() <= y.get(); }

    friend inline bool operator >=(${CLASSNAME} const & x, ${CLASSNAME} const & y) TBAG_NOEXCEPT
    { return x.get() >= y.get(); }

    inline bool operator ==(${CLASSNAME} const & obj) const TBAG_NOEXCEPT
    { return get() == obj.get(); }

    inline bool operator !=(${CLASSNAME} const & obj) const TBAG_NOEXCEPT
    { return get() != obj.get(); }

public:
    void reset();
};

${NAMESPACE_LIST_END}

// ${NAMESPACE_CLOSE_COMMENT}
${NAMESPACE_CLOSE}
// ${NAMESPACE_CLOSE_COMMENT}

#endif // ${INCLUDE_GUARD}

