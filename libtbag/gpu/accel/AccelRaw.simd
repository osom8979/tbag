/**
 * @file   AccelRaw.simd
 * @brief  AccelRaw class implementation.
 * @author zer0
 * @date   2018-01-08
 */

#include <libtbag/gpu/accel/AccelRaw.hpp>
#include <vector>

#include <simdpp/simd.h>
#include <simdpp/detail/align_v128.h>
#include <simdpp/detail/mem_block.h>
#include <simdpp/dispatch/get_arch_gcc_builtin_cpu_supports.h>
#include <simdpp/dispatch/get_arch_linux_cpuinfo.h>
#include <simdpp/dispatch/get_arch_raw_cpuid.h>

#if SIMDPP_HAS_GET_ARCH_GCC_BUILTIN_CPU_SUPPORTS == 1
# define SIMDPP_USER_ARCH_INFO  ::simdpp::get_arch_gcc_builtin_cpu_supports()
#elif SIMDPP_HAS_GET_ARCH_LINUX_CPUINFO == 1
# define SIMDPP_USER_ARCH_INFO  ::simdpp::get_arch_linux_cpuinfo()
#elif SIMDPP_HAS_GET_ARCH_RAW_CPUID == 1
# define SIMDPP_USER_ARCH_INFO  ::simdpp::get_arch_raw_cpuid()
#endif

// ------------------------------
namespace SIMDPP_ARCH_NAMESPACE {
// ------------------------------

int tbAccelAdd1f(float const * v1, float const * v2, float * result, int count)
{
//    using AlignedVector = std::vector<simdpp::float32x4, simdpp::aligned_allocator<simdpp::float32x4, sizeof(simdpp::float32x4)> >;
//    AlignedVector v1_vector;
//    AlignedVector v2_vector;
//    for (int i = 0; i < count; ++i) {
//        simdpp::float32x4 v1_align = (simdpp::float32x4) *prevent_optimization(v1_vector.data() + i);
//        simdpp::float32x4 v2_align = (simdpp::float32x4) *prevent_optimization(v2_vector.data() + i);
//        auto r = simdpp::add(v1_align, v2_align);
//    }
    return TB_ACCEL_FALSE;
}

int tbAccelAdd1d(double const * v1, double const * v2, double * result, int count)
{
    return TB_ACCEL_FALSE;
}

// ---------------------------------
} // namespace SIMDPP_ARCH_NAMESPACE
// ---------------------------------

#if defined(SIMDPP_USER_ARCH_INFO)
SIMDPP_MAKE_DISPATCHER((int)(tbAccelAdd1f)((float  const *)v1, (float  const *)v2, (float  *)result, (int)count));
SIMDPP_MAKE_DISPATCHER((int)(tbAccelAdd1d)((double const *)v1, (double const *)v2, (double *)result, (int)count));
#endif

