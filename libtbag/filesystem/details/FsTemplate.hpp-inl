/**
 * @file   FsTemplate.hpp-inl
 * @brief  Template support-filesystem utilities.
 * @author zer0
 * @date   2016-12-12
 * @date   2016-12-13 (Rename: TemplateFileSystem -> FsTemplate)
 */

#ifndef __INCLUDE_LIBTBAG__LIBTBAG_FILESYSTEM_DETAILS_FSTEMPLATE_HPP_INL__
#define __INCLUDE_LIBTBAG__LIBTBAG_FILESYSTEM_DETAILS_FSTEMPLATE_HPP_INL__

// MS compatible compilers support #pragma once
#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

#include <libtbag/config.h>
#include <libtbag/predef.hpp>
#include <libtbag/locale/Locale.hpp>
#include <libtbag/locale/Convert.hpp>

#include <cassert>
#include <string>

#include <unicode/unistr.h>
#include <unicode/uchar.h>

// -------------------
NAMESPACE_LIBTBAG_OPEN
// -------------------

namespace filesystem {
namespace details    {

template <typename Predicated>
inline static bool isFromUtf8Path(std::string const & utf8_path, Predicated predicated)
{
    if (locale::isUtf8GloablEncodingName() == false) {
        std::string native_path;
        if (locale::convertFromUtf8(utf8_path, locale::getGlobalEncodingName(), native_path)) {
            return predicated(native_path);
        }
    }
    return predicated(utf8_path);
}

template <typename Predicated>
inline static std::string toUtf8Path(Predicated predicated)
{
    std::string native_path = predicated();
    if (locale::isUtf8GloablEncodingName() == false) {
        std::string utf8_path;
        if (locale::convertToUtf8(native_path, locale::getGlobalEncodingName(), utf8_path)) {
            return utf8_path;
        }
    }
    return native_path;
}

} // namespace details
} // namespace filesystem

// --------------------
NAMESPACE_LIBTBAG_CLOSE
// --------------------

#endif // __INCLUDE_LIBTBAG__LIBTBAG_FILESYSTEM_DETAILS_FSTEMPLATE_HPP_INL__

